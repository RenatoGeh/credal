#python
import torch
import torchvision

def even_net(): return torch.nn.Sequential(
    torch.nn.Flatten(),
    torch.nn.Linear(28*28, 128),
    torch.nn.ReLU(True),
    torch.nn.Linear(128, 32),
    torch.nn.ReLU(True),
    torch.nn.Linear(32, 1),
    torch.nn.Sigmoid(),
  )

def mnist_data():
  train = torchvision.datasets.MNIST(root = "/tmp", train = True, download = True)
  test  = torchvision.datasets.MNIST(root = "/tmp", train = False, download = True)
  return train.data.float().reshape(len(train), 1, 28, 28)/255., train.targets, \
         test.data.float().reshape(len(test), 1, 28, 28)/255., test.targets

def normalize(X_R, Y_R, X_T, Y_T, mu, sigma):
  return (X_R-mu)/sigma, Y_R, (X_T-mu)/sigma, Y_T

train_X, train_Y, test_X, test_Y = normalize(*mnist_data(), 0.1307, 0.3081)
def pick_slice(data, which):
  h = len(data)//2
  return slice(h, len(data)) if which else slice(0, h)
def mnist_images_train(which): return train_X[pick_slice(train_X, which)]
def mnist_images_test(which): return test_X[pick_slice(test_X, which)]
def mnist_labels_train():
  labels = torch.concatenate((train_Y[:(h := len(train_Y)//2)].reshape(-1, 1),
                              train_Y[h:].reshape(-1, 1)), axis=1)
  return [["even" if x % 2 == 0 or y % 2 == 0 else "odd"] for x, y in labels]
#end.

input(0) ~ test(@mnist_images_test(0)), train(@mnist_images_train(0)).
input(1) ~ test(@mnist_images_test(1)), train(@mnist_images_train(1)).

?::is_even(X) as @even_net :- input(X).
even :- is_even(0).
even :- is_even(1).
odd  :- not even.

#semantics maxent.
#query even.
#learn @mnist_labels_train, lr = 0.0001, niters = 10, alg = "lagrange", batch = 1000.
